#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<signal.h>
void f1(int n)
{
printf("child exited..\n");
}
main()
{
int i=0,t,v;
int pid[4];
pid[0]=getpid();
signal(9,f1);
printf("%d.....%d..\n",getpid(),getppid());
if(pid[1]=fork()==0)
{
printf("%d.....%d..\n",getpid(),getppid());
srand(getpid());
t=rand()%10+1;
printf("%d...wainting for %d sec.\n",getpid(),t);
sleep(t);
printf("%d exiting....%d\n",getpid(),getppid());
exit(1);
}
else
{
if(pid[2]=fork()==0)
{
printf("%d.....%d..\n",getpid(),getppid());
srand(getpid());
t=rand()%10+1;
printf("%d..waiting for %d sec.\n",getpid(),t);
sleep(t);
printf("%d exiting..%d\n",getpid(),getppid());
exit(2);
}
else
{
if(pid[3]=fork()==0)
{
printf("%d.....%d..\n",getpid(),getppid());
srand(getpid());
t=rand()%10+1;
printf("%d waiting for %d sec.\n",getpid(),t);
sleep(t);
printf("%d exiting..%d\n",getpid(),getppid());
exit(3);
}
else
{
printf("%d.....in parent\n",getpid());
/*wait(&v);
v>>=8;
while((v==1)||(v==2)||(v==3))
{
wait(&v);
v>>=8;
}
printf("parent exiting after all children exited.....\n");
*/
while(1)
{
system("ps");
sleep(5);
}
}
}
}
}
